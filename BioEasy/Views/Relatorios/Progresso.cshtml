@using Microsoft.AspNetCore.Mvc.NewtonsoftJson;

@model BioEasy.ViewModels.Progresso

@{
    ViewData["Title"] = "Relatorio de Progresso";
    Layout = ViewBag.PDF == "PDF" ? "~/Views/Shared/_LayoutPDF.cshtml" : "~/Views/Shared/_Layout.cshtml";
}

<div class="container text-center">
    @if (ViewBag.PDF == "PDF")
    {
    <hr>

    <div class="container">
        <div class="row">
            <div class="col col-2">
                <img id="logoReport" src="data:image/jpeg;base64, @ViewBag.Logo" width="100" height="100" />
            </div>
            <div class="col col-8">
                <p></p>
                <p></p>
                <p>@ViewBag.NomeEmpresa</p>
                <p>CRN/CRM: @ViewBag.CRN</p>
            </div>
        </div>
    </div>
    }
    else 
    { 
<a class="btn btn-light" asp-action="Index" asp-route-id="@ViewBag.PacienteId">Voltar</a>
    <a asp-controller="Relatorios" asp-action="GeneratePDF" asp-route-pacienteId="@ViewBag.PacienteId" asp-route-relatorio="Progresso" target="_blank" class="btn btn-primary">Gerar PDF</a>
    <a class="btn btn-primary">Enviar por Email</a>
    }

    <hr>

    <h1>Relatorio de Progresso</h1>
    <hr>
    <h2>Dados do Paciente</h2>
    <hr>
    <div class="container">
        <div class="row">
            <div class="col">@Html.DisplayNameFor(model => model.Nome)</div>
            <div class="col">@Html.DisplayFor(model => model.Nome)</div>
            <div class="col">@Html.DisplayNameFor(model => model.Sexo)</div>
            <div class="col">@Html.DisplayFor(model => model.Sexo)</div>
            <div class="w-100"></div>
            <div class="col">@Html.DisplayNameFor(model => model.DataNascimento)</div>
            <div class="col">@Html.DisplayFor(model => model.DataNascimento)</div>
            <div class="col">@Html.DisplayNameFor(model => model.Altura)</div>
            <div class="col">@Html.DisplayFor(model => model.Altura)</div>
            <div class="w-100"></div>
            <div class="col">@Html.DisplayName("Data")</div>
            <div class="col">@(DateTime.Now.ToString("dd/MM/yyyy"))</div>
            <div class="col">@Html.DisplayNameFor(model => model.HistoricoPaciente.First().Peso)</div>
            <div class="col">@Html.DisplayFor(model => model.HistoricoPaciente.First().Peso)</div>
            <div class="w-100"></div>
            <div class="col">@Html.DisplayNameFor(model => model.HistoricoPaciente.First().MassaAdiposa)</div>
            <div class="col">@Html.DisplayFor(model => model.HistoricoPaciente.First().MassaAdiposa)</div>
            <div class="col">@Html.DisplayNameFor(model => model.HistoricoPaciente.First().MassaNaoAdiposa)</div>
            <div class="col">@Html.DisplayFor(model => model.HistoricoPaciente.First().MassaNaoAdiposa)</div>
            <div class="w-100"></div>
            <div class="col">@Html.DisplayNameFor(model => model.HistoricoPaciente.First().MassaMuscular)</div>
            <div class="col">@Html.DisplayFor(model => model.HistoricoPaciente.First().MassaMuscular)</div>
            <div class="col">@Html.DisplayNameFor(model => model.HistoricoPaciente.First().MassaOssea)</div>
            <div class="col">@Html.DisplayFor(model => model.HistoricoPaciente.First().MassaOssea)</div>
            <div class="w-100"></div>
            <div class="col">@Html.DisplayNameFor(model => model.HistoricoPaciente.First().IngestaoCalorica)</div>
            <div class="col">@Html.DisplayFor(model => model.HistoricoPaciente.First().IngestaoCalorica)</div>
            <div class="col">@Html.DisplayNameFor(model => model.HistoricoPaciente.First().IdadeMetabolica)</div>
            <div class="col">@Html.DisplayFor(model => model.HistoricoPaciente.First().IdadeMetabolica)</div>
            <div class="w-100"></div>
            <div class="col">@Html.DisplayNameFor(model => model.HistoricoPaciente.First().GorduraVisceral)</div>
            <div class="col">@Html.DisplayFor(model => model.HistoricoPaciente.First().GorduraVisceral)</div>
            <div class="col"></div>
            <div class="col"></div>
        </div>
    </div>
    <hr>

    <h3>Análise de Gordura Corporal(%)</h3>
    <hr>
    <div id="divGorduraCorporal" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartGorduraCorporal"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().DataRegistroBalanca)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().NivelGordura)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.HistoricoPaciente)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataRegistroBalanca)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.NivelGordura)
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-12">
                    <div id="lineGorduraCorporal"></div>
                </div>
            </div>
        </div>
    </div>

    <h3>Análise de IMC(Kg/m2)</h3>
    <hr>
    <div id="divIMC" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartIMC"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().DataRegistroBalanca)
                                </th>
                                <th>
                                    @Html.DisplayName("IMC")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.HistoricoPaciente)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataRegistroBalanca)
                                    </td>
                                    <td>
                                        @((item.Peso / (Model.Altura * Model.Altura)).ToString("#.00;(#.00)"))
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="row">
                <div class="col col-md-12">
                    <div id="lineIMC"></div>
                </div>
            </div>
        </div>
    </div>
    <hr>

    <h3>Análise de Gordura Visceral</h3>
    <hr>
    <div id="divGorduraVisceral" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartGorduraVisceral"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().DataRegistroBalanca)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().GorduraVisceral)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.HistoricoPaciente)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataRegistroBalanca)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.GorduraVisceral)
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-12">
                    <div id="lineGorduraVisceral"></div>
                </div>
            </div>
        </div>
    </div>
    <hr>

    <h3>Análise de Massa Muscular</h3>
    <hr>
    <div id="divMassaMuscular" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartMassaMuscular"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().DataRegistroBalanca)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().MassaMuscular)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.HistoricoPaciente)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataRegistroBalanca)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.MassaMuscular)
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-12">
                    <div id="lineMassaMuscular"></div>
                </div>
            </div>
        </div>
    </div>
    <hr>

    <h3>Análise de Água Corporal(%)</h3>
    <hr>
    <div id="divAguaCorporal" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartAguaCorporal"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().DataRegistroBalanca)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().AguaCorporal)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.HistoricoPaciente)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataRegistroBalanca)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.AguaCorporal)
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-12">
                    <div id="lineAguaCorporal"></div>
                </div>
            </div>
        </div>
    </div>
    <hr>

    <h3>Qualidade Muscular Total</h3>
    <hr>
    <div id="divQualidadeMuscular" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartQualidadeMuscular"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().DataRegistroBalanca)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().QualidadeMuscularTotal)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.HistoricoPaciente)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataRegistroBalanca)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.QualidadeMuscularTotal)
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-12">
                    <div id="lineQualidadeMuscular"></div>
                </div>
            </div>
        </div>
    </div>
    <hr>

    <h3>Distribuição de Segmento - Nível de Gordura (%)</h3>
    <hr>
    <div id="divSegmentoGorduraCorporal" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row">
                <div class="col col-md-12">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                </th>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <th>
                                        @Html.DisplayFor(modelItem => item.DataRegistroBalanca)
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().BracoDireitoNivelGordura)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BracoDireitoNivelGordura)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().BracoEsquerdoNivelGordura)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BracoEsquerdoNivelGordura)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().PernaDireitaNivelGordura)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PernaDireitaNivelGordura)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().PernaEsquerdaNivelGordura)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PernaEsquerdaNivelGordura)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().TroncoNivelGordura)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TroncoNivelGordura)
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="col col-md-12">
                    <div id="barNivelGorduraBracoDireito"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barNivelGorduraBracoEsquerdo"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barNivelGorduraPernaDireita"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barNivelGorduraPernaEsquerda"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barNivelGorduraTronco"></div>
                </div>
            </div>
        </div>
    </div>

    <hr>

    <h3>Distribuição de Segmento - Massa Muscular (Kg)</h3>
    <hr>
    <div id="divSegmentoGorduraCorporal" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row">
                <div class="col col-md-12">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                </th>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <th>
                                        @Html.DisplayFor(modelItem => item.DataRegistroBalanca)
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().BracoDireitoMassaMuscular)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BracoDireitoMassaMuscular)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().BracoEsquerdoMassaMuscular)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BracoEsquerdoMassaMuscular)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().PernaDireitaMassaMuscular)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PernaDireitaMassaMuscular)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().PernaEsquerdaMassaMuscular)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PernaEsquerdaMassaMuscular)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().TroncoMassaMuscular)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TroncoMassaMuscular)
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="col col-md-12">
                    <div id="barMassaMuscularBracoDireito"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaMuscularBracoEsquerdo"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaMuscularPernaDireita"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaMuscularPernaEsquerda"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaMuscularTronco"></div>
                </div>
            </div>
        </div>
    </div>

    <hr>

    <h3>Distribuição de Segmento - Massa Adiposa (Kg)</h3>
    <hr>
    <div id="divSegmentoGorduraCorporal" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row">
                <div class="col col-md-12">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                </th>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <th>
                                        @Html.DisplayFor(modelItem => item.DataRegistroBalanca)
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().BracoDireitoMassaAdiposa)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BracoDireitoMassaAdiposa)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().BracoEsquerdoMassaAdiposa)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BracoEsquerdoMassaAdiposa)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().PernaDireitaMassaAdiposa)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PernaDireitaMassaAdiposa)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().PernaEsquerdaMassaAdiposa)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PernaEsquerdaMassaAdiposa)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().TroncoMassaAdiposa)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TroncoMassaAdiposa)
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="col col-md-12">
                    <div id="barMassaAdiposaBracoDireito"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaAdiposaBracoEsquerdo"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaAdiposaPernaDireita"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaAdiposaPernaEsquerda"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaAdiposaTronco"></div>
                </div>
            </div>
        </div>
    </div>

    <hr>

    <h3>Distribuição de Segmento - Massa não Adiposa (Kg)</h3>
    <hr>
    <div id="divSegmentoGorduraCorporal" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row">
                <div class="col col-md-12">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                </th>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <th>
                                        @Html.DisplayFor(modelItem => item.DataRegistroBalanca)
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().BracoDireitoMassaNaoAdiposa)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BracoDireitoMassaNaoAdiposa)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().BracoEsquerdoMassaNaoAdiposa)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BracoEsquerdoMassaNaoAdiposa)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().PernaDireitaMassaNaoAdiposa)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PernaDireitaMassaNaoAdiposa)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().PernaEsquerdaMassaNaoAdiposa)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PernaEsquerdaMassaNaoAdiposa)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    @Html.DisplayNameFor(model => model.HistoricoPaciente.First().TroncoMassaNaoAdiposa)
                                </td>
                                @foreach (var item in Model.HistoricoPaciente)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TroncoMassaNaoAdiposa)
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="col col-md-12">
                    <div id="barMassaNaoAdiposaBracoDireito"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaNaoAdiposaBracoEsquerdo"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaNaoAdiposaPernaDireita"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaNaoAdiposaPernaEsquerda"></div>
                </div>
                <div class="col col-md-12">
                    <div id="barMassaNaoAdiposaTronco"></div>
                </div>
            </div>
        </div>
    </div>

    <hr>

    <h2>Dados Laboratoriais</h2>
    <hr>

    <h3>Análise de Colesterol(mg/dl)</h3>
    <hr>
    <div id="divColesterol" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartColesterol"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.AnaliseLaboratorial.First().DataLancamento)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AnaliseLaboratorial.First().Colesterol)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.AnaliseLaboratorial)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataLancamento)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Colesterol)
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-12">
                    <div id="lineColesterol"></div>
                </div>
            </div>
        </div>
    </div>

    <hr>

    <div id="divLDL" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartLDL"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.AnaliseLaboratorial.First().DataLancamento)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AnaliseLaboratorial.First().LDL)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.AnaliseLaboratorial)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataLancamento)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.LDL)
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-12">
                    <div id="lineLDL"></div>
                </div>
            </div>
        </div>
    </div>

    <hr>
    
    <div id="divHDL" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartHDL"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.AnaliseLaboratorial.First().DataLancamento)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AnaliseLaboratorial.First().HDL)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.AnaliseLaboratorial)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataLancamento)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.HDL)
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-12">
                    <div id="lineHDL"></div>
                </div>
            </div>
        </div>
    </div>

    <hr>

    <div id="divTriglicerideos" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartTriglicerideos"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.AnaliseLaboratorial.First().DataLancamento)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AnaliseLaboratorial.First().Triglicerideos)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.AnaliseLaboratorial)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataLancamento)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Triglicerideos)
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-12">
                    <div id="lineTriglicerideos"></div>
                </div>
            </div>
        </div>
    </div>

    <hr>

    <div id="divAcucarSangue" class="d-flex justify-content-center">
        <div class="container justify-content-center">
            <div class="row  justify-content-center">
                <div id="canvas-holder" class="col col-md-6" style="width:50%">
                    <canvas id="chartAcucarSangue"></canvas>
                </div>

                <div class="col col-md-6">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.AnaliseLaboratorial.First().DataLancamento)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AnaliseLaboratorial.First().AcucarNoSangue)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.AnaliseLaboratorial)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DataLancamento)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.AcucarNoSangue)
                                    </td>
                                    <td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-12">
                    <div id="lineAcucarNoSangue"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/chart.js/dist/Chart.bundle.js"></script>
    <script src="~/lib/chart.js/dist/chartjs-gauge.js"></script>
    <script src="~/lib/chart.js/dist/chartjs-plugin-datalabels.js"></script>
    <script src="~/lib/chart.js/dist/loader.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            FillGorduraCorporalGauge();
            FillIMC();
            FillGorduraVisceral();
            FillMassaMuscular();
            FillAguaCorporal();
            FillQualidadeMuscular();
            FillColesterol();
            FillLDL();
            FillHDL();
            FillTriglicerideos();
            FillAcucarSangue();
        });

        var dadosGerais =@Json.Serialize(Model.HistoricoPaciente);
        var dadosLaboratoriais =@Json.Serialize(Model.AnaliseLaboratorial);

        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(drawChartGorduraCorporal);
        google.charts.setOnLoadCallback(drawChartIMC);
        google.charts.setOnLoadCallback(drawChartGorduraVisceral);
        google.charts.setOnLoadCallback(drawChartMassaMuscular);
        google.charts.setOnLoadCallback(drawChartAguaCorporal);
        google.charts.setOnLoadCallback(drawChartQualidadeMuscular);
        google.charts.setOnLoadCallback(drawChartColesterol);
        google.charts.setOnLoadCallback(drawChartLDL);
        google.charts.setOnLoadCallback(drawChartHDL);
        google.charts.setOnLoadCallback(drawChartTriglicerideos);
        google.charts.setOnLoadCallback(drawChartAcucarNoSangue);
        google.charts.setOnLoadCallback(drawBarChartMassaMuscularBracoDireito);
        google.charts.setOnLoadCallback(drawBarChartMassaMuscularBracoEsquerdo);
        google.charts.setOnLoadCallback(drawBarChartMassaMuscularPernaDireita);
        google.charts.setOnLoadCallback(drawBarChartMassaMuscularPernaEsquerda);
        google.charts.setOnLoadCallback(drawBarChartMassaMuscularTronco);
        google.charts.setOnLoadCallback(drawBarChartNivelGorduraBracoDireito);
        google.charts.setOnLoadCallback(drawBarChartNivelGorduraBracoEsquerdo);
        google.charts.setOnLoadCallback(drawBarChartNivelGorduraPernaDireita);
        google.charts.setOnLoadCallback(drawBarChartNivelGorduraPernaEsquerda);
        google.charts.setOnLoadCallback(drawBarChartNivelGorduraTronco);
        google.charts.setOnLoadCallback(drawBarChartMassaAdiposaBracoDireito);
        google.charts.setOnLoadCallback(drawBarChartMassaAdiposaBracoEsquerdo);
        google.charts.setOnLoadCallback(drawBarChartMassaAdiposaPernaDireita);
        google.charts.setOnLoadCallback(drawBarChartMassaAdiposaPernaEsquerda);
        google.charts.setOnLoadCallback(drawBarChartMassaAdiposaTronco);
        google.charts.setOnLoadCallback(drawBarChartMassaNaoAdiposaBracoDireito);
        google.charts.setOnLoadCallback(drawBarChartMassaNaoAdiposaBracoEsquerdo);
        google.charts.setOnLoadCallback(drawBarChartMassaNaoAdiposaPernaDireita);
        google.charts.setOnLoadCallback(drawBarChartMassaNaoAdiposaPernaEsquerda);
        google.charts.setOnLoadCallback(drawBarChartMassaNaoAdiposaTronco);

        function drawBarChartMassaNaoAdiposaTronco() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa não Adiposa');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.troncoMassaNaoAdiposa]])
            });

            var options = {
                title: 'Análise de Massa não Adiposa - Tronco',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaNaoAdiposaTronco'));
            chart.draw(data, options);
        }

        function drawBarChartMassaNaoAdiposaPernaEsquerda() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa não Adiposa');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.pernaDireitaMassaNaoAdiposa]])
            });

            var options = {
                title: 'Análise de Massa não Adiposa - Perna Esquerda',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaNaoAdiposaPernaEsquerda'));
            chart.draw(data, options);
        }

        function drawBarChartMassaNaoAdiposaPernaDireita() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa não Adiposa');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.pernaDireitaMassaNaoAdiposa]])
            });

            var options = {
                title: 'Análise de Massa não Adiposa - Perna Direita',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaNaoAdiposaPernaDireita'));
            chart.draw(data, options);
        }

        function drawBarChartMassaNaoAdiposaBracoEsquerdo() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa não Adiposa');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.bracoEsquerdoMassaNaoAdiposa]])
            });

            var options = {
                title: 'Análise de Massa não Adiposa - Braço Esquerdo',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaNaoAdiposaBracoEsquerdo'));
            chart.draw(data, options);
        }

        function drawBarChartMassaNaoAdiposaBracoDireito() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa não Adiposa');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.bracoDireitoMassaNaoAdiposa]])
            });

            var options = {
                title: 'Análise de Massa não Adiposa - Braço Direito',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaNaoAdiposaBracoDireito'));
            chart.draw(data, options);
        }

        function drawBarChartMassaAdiposaTronco() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Adiposa');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.troncoMassaAdiposa]])
            });

            var options = {
                title: 'Análise de Massa Adiposa - Tronco',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaAdiposaTronco'));
            chart.draw(data, options);
        }

        function drawBarChartMassaAdiposaPernaEsquerda() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Adiposa');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.pernaDireitaMassaAdiposa]])
            });

            var options = {
                title: 'Análise de Massa Adiposa - Perna Esquerda',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaAdiposaPernaEsquerda'));
            chart.draw(data, options);
        }

        function drawBarChartMassaAdiposaPernaDireita() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Adiposa');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.pernaDireitaMassaAdiposa]])
            });

            var options = {
                title: 'Análise de Massa Adiposa - Perna Direita',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaAdiposaPernaDireita'));
            chart.draw(data, options);
        }

        function drawBarChartMassaAdiposaBracoEsquerdo() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Adiposa');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.bracoEsquerdoMassaAdiposa]])
            });

            var options = {
                title: 'Análise de Massa Adiposa - Braço Esquerdo',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaAdiposaBracoEsquerdo'));
            chart.draw(data, options);
        }

        function drawBarChartMassaAdiposaBracoDireito() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Adiposa');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.bracoDireitoMassaAdiposa]])
            });

            var options = {
                title: 'Análise de Massa Adiposa - Braço Direito',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaAdiposaBracoDireito'));
            chart.draw(data, options);
        }

        function drawBarChartNivelGorduraTronco() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Nivel Gordura');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.troncoNivelGordura]])
            });

            var options = {
                title: 'Análise de Nivel de Gordura - Tronco',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barNivelGorduraTronco'));
            chart.draw(data, options);
        }

        function drawBarChartNivelGorduraPernaEsquerda() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Nivel Gordura');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.pernaDireitaNivelGordura]])
            });

            var options = {
                title: 'Análise de Nivel de Gordura - Perna Esquerda',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barNivelGorduraPernaEsquerda'));
            chart.draw(data, options);
        }

        function drawBarChartNivelGorduraPernaDireita() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Nivel Gordura');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.pernaDireitaNivelGordura]])
            });

            var options = {
                title: 'Análise de Nivel de Gordura - Perna Direita',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barNivelGorduraPernaDireita'));
            chart.draw(data, options);
        }

        function drawBarChartNivelGorduraBracoEsquerdo() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Nivel Gordura');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.bracoEsquerdoNivelGordura]])
            });

            var options = {
                title: 'Análise de Nivel de Gordura - Braço Esquerdo',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barNivelGorduraBracoEsquerdo'));
            chart.draw(data, options);
        }

        function drawBarChartNivelGorduraBracoDireito() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Nivel Gordura');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.bracoDireitoNivelGordura]])
            });

            var options = {
                title: 'Análise de Nivel de Gordura - Braço Direito',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barNivelGorduraBracoDireito'));
            chart.draw(data, options);
        }

        function drawBarChartMassaMuscularTronco() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Muscular');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.troncoMassaMuscular]])
            });

            var options = {
                title: 'Análise de Massa Muscular - Tronco',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaMuscularTronco'));
            chart.draw(data, options);
        }

        function drawBarChartMassaMuscularPernaEsquerda() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Muscular');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.pernaDireitaMassaMuscular]])
            });

            var options = {
                title: 'Análise de Massa Muscular - Perna Esquerda',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaMuscularPernaEsquerda'));
            chart.draw(data, options);
        }

        function drawBarChartMassaMuscularPernaDireita() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Muscular');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.pernaDireitaMassaMuscular]])
            });

            var options = {
                title: 'Análise de Massa Muscular - Perna Direita',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaMuscularPernaDireita'));
            chart.draw(data, options);
        }

        function drawBarChartMassaMuscularBracoEsquerdo() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Muscular');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.bracoEsquerdoMassaMuscular]])
            });

            var options = {
                title: 'Análise de Massa Muscular - Braço Esquerdo',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaMuscularBracoEsquerdo'));
            chart.draw(data, options);
        }

        function drawBarChartMassaMuscularBracoDireito() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Muscular');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.bracoDireitoMassaMuscular]])
            });

            var options = {
                title: 'Análise de Massa Muscular - Braço Direito',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('barMassaMuscularBracoDireito'));
            chart.draw(data, options);
        }

        function drawChartAcucarNoSangue() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Açúcar no Sangue');

            $.each(dadosLaboratoriais, function (index, value) {
                data.addRows([[value.dataLancamento, value.acucarNoSangue]])
            });

            var options = {
                title: 'Açúcar no Sangue',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineAcucarNoSangue'));
            chart.draw(data, options);
        }

        function drawChartTriglicerideos() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Triglicerídeos');

            $.each(dadosLaboratoriais, function (index, value) {
                data.addRows([[value.dataLancamento, value.triglicerideos]])
            });

            var options = {
                title: 'Triglicerídeos',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineTriglicerideos'));
            chart.draw(data, options);
        }

        function drawChartHDL() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'HDL');

            $.each(dadosLaboratoriais, function (index, value) {
                data.addRows([[value.dataLancamento, value.hdl]])
            });

            var options = {
                title: 'HDL',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineHDL'));
            chart.draw(data, options);
        }

        function drawChartLDL() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'LDL');

            $.each(dadosLaboratoriais, function (index, value) {
                data.addRows([[value.dataLancamento, value.ldl]])
            });

            var options = {
                title: 'LDL',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineLDL'));
            chart.draw(data, options);
        }

        function drawChartColesterol() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Colesterol');

            $.each(dadosLaboratoriais, function (index, value) {
                data.addRows([[value.dataLancamento, value.colesterol]])
            });

            var options = {
                title: 'Colesterol',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineColesterol'));
            chart.draw(data, options);
        }

        function drawChartQualidadeMuscular() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Qualidade Muscular');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.qualidadeMuscularTotal]])
            });

            var options = {
                title: 'Qualidade Muscular Total',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineQualidadeMuscular'));
            chart.draw(data, options);
        }

        function drawChartAguaCorporal() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Água Corporal');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.aguaCorporal]])
            });

            var options = {
                title: 'Análise de Água Corporal',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineAguaCorporal'));
            chart.draw(data, options);
        }

        function drawChartMassaMuscular() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Massa Muscular');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.massaMuscular]])
            });

            var options = {
                title: 'Análise de Massa Muscular',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineMassaMuscular'));
            chart.draw(data, options);
        }

        function drawChartIMC() {
            var data = new google.visualization.DataTable();
            var altura = @Model.Altura;
            data.addColumn('string', 'Data');
            data.addColumn('number', 'IMC');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, (value.peso / (altura * altura))]])
            });

            var options = {
                title: 'Análise de IMC(Kg/m2)',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineIMC'));
            chart.draw(data, options);
        }

        function drawChartGorduraVisceral() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Gordura Visceral');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.gorduraVisceral]])
            });

            var options = {
                title: 'Análise de Gordura Visceral',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineGorduraVisceral'));
            chart.draw(data, options);
        }

        function drawChartGorduraCorporal() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Data');
            data.addColumn('number', 'Nível de Gordura');

            $.each(dadosGerais, function (index, value) {
                data.addRows([[value.dataRegistroBalanca, value.nivelGordura]])
            });

            var options = {
                title: 'Análise de Gordura Corporal(%)',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('lineGorduraCorporal'));
            chart.draw(data, options);
        }

        function FillAcucarSangue() {
            var valor = @Model.AnaliseLaboratorial.Last().AcucarNoSangue;
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Baixo', 'Diminuído', 'Alto'],
                    datasets: [{
                        data: [95, 120, 180],
                        value: valor,
                        backgroundColor: ['green', 'yellow', 'red'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Açúcar no Sangue'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartAcucarSangue').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

        function FillTriglicerideos() {
            var valor = @Model.AnaliseLaboratorial.Last().Triglicerideos;
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Baixo', 'Diminuído', 'Alto'],
                    datasets: [{
                        data: [140, 180, 250],
                        value: valor,
                        backgroundColor: ['green', 'yellow', 'red'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Triglicerídeos'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartTriglicerideos').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

        function FillHDL() {
            var valor = @Model.AnaliseLaboratorial.Last().HDL;
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Baixo', 'Diminuído', 'Bom'],
                    datasets: [{
                        data: [20, 35, 60],
                        value: valor,
                        backgroundColor: ['red', 'yellow', 'green'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'HDL'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartHDL').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

        function FillLDL() {
            var valor = @Model.AnaliseLaboratorial.Last().LDL;
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Diminuído', 'Bom', 'Aumentado', 'Alto'],
                    datasets: [{
                        data: [10, 120, 180, 240],
                        value: valor,
                        backgroundColor: ['green', 'yellow', 'orange', 'red'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'LDL'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartLDL').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

        function FillColesterol() {
            var valor = @Model.AnaliseLaboratorial.Last().Colesterol;
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Diminuído', 'Bom', 'Aumentado', 'Alto'],
                    datasets: [{
                        data: [10, 160, 240, 360],
                        value: valor,
                        backgroundColor: ['green', 'yellow', 'orange', 'red'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Colesterol'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartColesterol').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

        function FillQualidadeMuscular() {
            var valor = @Model.HistoricoPaciente.Last().QualidadeMuscularTotal;
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Baixo', 'Normal', 'Aumentado'],
                    datasets: [{
                        data: [46, 73, 80],
                        value: valor,
                        backgroundColor: ['green', 'yellow', 'red'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Qualidade Muscular Total'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartQualidadeMuscular').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

        function FillAguaCorporal() {
            var valor = @Model.HistoricoPaciente.Last().AguaCorporal;
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Diminuído', 'Bom', 'Aumentado'],
                    datasets: [{
                        data: [50, 65, 80],
                        value: valor,
                        backgroundColor: ['green', 'yellow', 'red'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Análise de Água Corporal(%)'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartAguaCorporal').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

        function FillMassaMuscular() {
            var valor = @Model.HistoricoPaciente.Last().MassaMuscular;
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Baixo', 'Diminuído', 'Bom', 'Aumentado'],
                    datasets: [{
                        data: [68, 74, 85, 100],
                        value: valor,
                        backgroundColor: ['red', 'orange', 'yellow', 'green'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Análise de Massa Muscular'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartMassaMuscular').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

        function FillGorduraVisceral() {
            var valor = @Model.HistoricoPaciente.Last().GorduraVisceral;
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Bom', 'Aumentado', 'Alto'],
                    datasets: [{
                        data: [13, 18, 24],
                        value: valor,
                        backgroundColor: ['green', 'yellow', 'red'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Análise de Gordura Visceral'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartGorduraVisceral').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

        function FillIMC() {
            var valor = @((Model.HistoricoPaciente.Last().Peso / (Model.Altura * Model.Altura)).ToString("#.00;(#.00)"));
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Peso inferior ao normal', 'Nível bom', 'Excesso de peso', 'Adiposidade'],
                    datasets: [{
                        data: [22, 27, 31.5, 36],
                        value: valor,
                        backgroundColor: ['green', 'yellow', 'orange', 'red'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Análise de IMC(Kg/m2)'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartIMC').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

        function FillGorduraCorporalGauge() {
            var valor = @Model.HistoricoPaciente.Last().NivelGordura;
            var config = {
                type: 'gauge',
                data: {
                    labels: ['Diminuído', 'Bom', 'Aumentado', 'Adiposidade'],
                    datasets: [{
                        data: [10, 22, 28, 32],
                        value: valor,
                        backgroundColor: ['green', 'yellow', 'orange', 'red'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Análise de Gordura Corporal(%)'
                    },
                    layout: {
                        padding: {
                            bottom: 30
                        }
                    },
                    needle: {
                        // Needle circle radius as the percentage of the chart area width
                        radiusPercentage: 2,
                        // Needle width as the percentage of the chart area width
                        widthPercentage: 3.2,
                        // Needle length as the percentage of the interval between inner radius (0%) and outer radius (100%) of the arc
                        lengthPercentage: 80,
                        // The color of the needle
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => {
                            return value;
                        },
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        borderRadius: 5,
                        padding: {
                            top: 10,
                            bottom: 10
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: true,
                            formatter: function (value, context) {
                                return context.chart.data.labels[context.dataIndex];
                            },
                            //color: function (context) {
                            //  return context.dataset.backgroundColor;
                            //},
                            color: 'rgba(0, 0, 0, 1.0)',
                            //color: 'rgba(255, 255, 255, 1.0)',
                            backgroundColor: null,
                            font: {
                                size: 20,
                                weight: 'bold'
                            }
                        }
                    }
                }
            };

            var ctx = document.getElementById('chartGorduraCorporal').getContext('2d');
            window.myGauge = new Chart(ctx, config);
        }

    </script>
}

